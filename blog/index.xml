<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on shedding.bike</title><link>https://shedding.bike/blog/</link><description>Recent content in Blog on shedding.bike</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Mon, 23 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://shedding.bike/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>An Alternative Happiness</title><link>https://shedding.bike/an-alternative-happiness/</link><pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate><guid>https://shedding.bike/an-alternative-happiness/</guid><description>&lt;p>Lately I’ve been thinking about a theory of happiness that I call gestalt perfectionism. It’s the idea that one’s goal in life (call it happiness, well-being, whatever,) is to pursue greater gestalts—as opposed to pleasure, which most people pursue intuitively. Greater gestalts are “deeper, broader insights,” and the pursuit is that of knowledge, meaning, and self-expression. This may seem arbitrary, but I’ve found this formulation makes good judgments and clarifies the value and harm of certain activities, like demoing builds, modern art, and info hazards. I wrote an &lt;a href="https://www.exr0n.com/wildernessfile/essays/24fa_humpl136_gestalt_perfectionism.pdf">essay&lt;/a> on this for my philosophy class last quarter, but I wanted a self-contained nugget to refer back to—that’s this post.&lt;/p></description></item><item><title>Stack Safety and CPS In Common Lisp</title><link>https://shedding.bike/stack-safety-and-cps-in-common-lisp/</link><pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate><guid>https://shedding.bike/stack-safety-and-cps-in-common-lisp/</guid><description>&lt;p>&lt;strong>Editor&amp;rsquo;s note&lt;/strong>: this is a translation of a Common Lisp file I sent to my
sister one day a couple months ago when she was asking why her Emacs Lisp function
was hitting a recursion limit. I was fresh off of CPS lab and proceeded to nerd
out. Also, any hate of &lt;code>setf&lt;/code> in here is a comedic exaggeration.&lt;/p>
&lt;p>This is a very simple tour of using Common Lisp to write some simple factorial
and is-even functions. If you&amp;rsquo;re new to functional programming or Lisp you might
find it interesting, but this is mostly to test out this website.&lt;/p></description></item><item><title>Why is building a to-do list app so darn hard?</title><link>https://shedding.bike/why-is-building-a-to-do-list-app-so-darn-hard/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate><guid>https://shedding.bike/why-is-building-a-to-do-list-app-so-darn-hard/</guid><description>&lt;p>Why are Todo Lists (a.k.a. personal productivity systems) so hard to build well?&lt;/p>
&lt;p>I&amp;rsquo;m genuinely curious. I was listening to the last episode of &lt;a href="https://www.relay.fm/cortex/">Cortex&lt;/a>, and one of the hosts (CGP Grey) brought up a similar point regarding personal productivity platforms. OmniFocus, the reigning champion of the industry for professionals looking for a deeply customized system, has been staggering in their ability to ship the next version of their application. Much of the market consists of various different packagings of the same offering. Grey&amp;rsquo;s thesis of these platforms essentially boils down to this:&lt;/p></description></item></channel></rss>